// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Dart bindings for libjpeg
class LibJpeg {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibJpeg(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibJpeg.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> jpeg_marker_get_name(
    int marker,
  ) {
    return _jpeg_marker_get_name(
      marker,
    );
  }

  late final _jpeg_marker_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'jpeg_marker_get_name');
  late final _jpeg_marker_get_name = _jpeg_marker_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> jpeg_marker_get_description(
    int marker,
  ) {
    return _jpeg_marker_get_description(
      marker,
    );
  }

  late final _jpeg_marker_get_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'jpeg_marker_get_description');
  late final _jpeg_marker_get_description = _jpeg_marker_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<JPEGData> jpeg_data_new() {
    return _jpeg_data_new();
  }

  late final _jpeg_data_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<JPEGData> Function()>>(
          'jpeg_data_new');
  late final _jpeg_data_new =
      _jpeg_data_newPtr.asFunction<ffi.Pointer<JPEGData> Function()>();

  ffi.Pointer<JPEGData> jpeg_data_new_from_file(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _jpeg_data_new_from_file(
      path,
    );
  }

  late final _jpeg_data_new_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<JPEGData> Function(
              ffi.Pointer<ffi.Char>)>>('jpeg_data_new_from_file');
  late final _jpeg_data_new_from_file = _jpeg_data_new_from_filePtr
      .asFunction<ffi.Pointer<JPEGData> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<JPEGData> jpeg_data_new_from_data(
    ffi.Pointer<ffi.UnsignedChar> data,
    int size,
  ) {
    return _jpeg_data_new_from_data(
      data,
      size,
    );
  }

  late final _jpeg_data_new_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<JPEGData> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('jpeg_data_new_from_data');
  late final _jpeg_data_new_from_data = _jpeg_data_new_from_dataPtr.asFunction<
      ffi.Pointer<JPEGData> Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void jpeg_data_ref(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_ref(
      data,
    );
  }

  late final _jpeg_data_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JPEGData>)>>(
          'jpeg_data_ref');
  late final _jpeg_data_ref =
      _jpeg_data_refPtr.asFunction<void Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_unref(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_unref(
      data,
    );
  }

  late final _jpeg_data_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JPEGData>)>>(
          'jpeg_data_unref');
  late final _jpeg_data_unref =
      _jpeg_data_unrefPtr.asFunction<void Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_free(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_free(
      data,
    );
  }

  late final _jpeg_data_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JPEGData>)>>(
          'jpeg_data_free');
  late final _jpeg_data_free =
      _jpeg_data_freePtr.asFunction<void Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_load_data(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ffi.UnsignedChar> d,
    int size,
  ) {
    return _jpeg_data_load_data(
      data,
      d,
      size,
    );
  }

  late final _jpeg_data_load_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JPEGData>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedInt)>>('jpeg_data_load_data');
  late final _jpeg_data_load_data = _jpeg_data_load_dataPtr.asFunction<
      void Function(
          ffi.Pointer<JPEGData>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void jpeg_data_save_data(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> d,
    ffi.Pointer<ffi.UnsignedInt> size,
  ) {
    return _jpeg_data_save_data(
      data,
      d,
      size,
    );
  }

  late final _jpeg_data_save_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JPEGData>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedInt>)>>('jpeg_data_save_data');
  late final _jpeg_data_save_data = _jpeg_data_save_dataPtr.asFunction<
      void Function(
          ffi.Pointer<JPEGData>,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  void jpeg_data_load_file(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _jpeg_data_load_file(
      data,
      path,
    );
  }

  late final _jpeg_data_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JPEGData>,
              ffi.Pointer<ffi.Char>)>>('jpeg_data_load_file');
  late final _jpeg_data_load_file = _jpeg_data_load_filePtr.asFunction<
      void Function(ffi.Pointer<JPEGData>, ffi.Pointer<ffi.Char>)>();

  int jpeg_data_save_file(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _jpeg_data_save_file(
      data,
      path,
    );
  }

  late final _jpeg_data_save_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<JPEGData>,
              ffi.Pointer<ffi.Char>)>>('jpeg_data_save_file');
  late final _jpeg_data_save_file = _jpeg_data_save_filePtr
      .asFunction<int Function(ffi.Pointer<JPEGData>, ffi.Pointer<ffi.Char>)>();

  void jpeg_data_set_exif_data(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ExifData> exif_data,
  ) {
    return _jpeg_data_set_exif_data(
      data,
      exif_data,
    );
  }

  late final _jpeg_data_set_exif_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<JPEGData>,
              ffi.Pointer<ExifData>)>>('jpeg_data_set_exif_data');
  late final _jpeg_data_set_exif_data = _jpeg_data_set_exif_dataPtr.asFunction<
      void Function(ffi.Pointer<JPEGData>, ffi.Pointer<ExifData>)>();

  ffi.Pointer<ExifData> jpeg_data_get_exif_data(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_get_exif_data(
      data,
    );
  }

  late final _jpeg_data_get_exif_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ExifData> Function(
              ffi.Pointer<JPEGData>)>>('jpeg_data_get_exif_data');
  late final _jpeg_data_get_exif_data = _jpeg_data_get_exif_dataPtr
      .asFunction<ffi.Pointer<ExifData> Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_dump(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_dump(
      data,
    );
  }

  late final _jpeg_data_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JPEGData>)>>(
          'jpeg_data_dump');
  late final _jpeg_data_dump =
      _jpeg_data_dumpPtr.asFunction<void Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_append_section(
    ffi.Pointer<JPEGData> data,
  ) {
    return _jpeg_data_append_section(
      data,
    );
  }

  late final _jpeg_data_append_sectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<JPEGData>)>>(
          'jpeg_data_append_section');
  late final _jpeg_data_append_section = _jpeg_data_append_sectionPtr
      .asFunction<void Function(ffi.Pointer<JPEGData>)>();

  void jpeg_data_log(
    ffi.Pointer<JPEGData> data,
    ffi.Pointer<ExifLog> log,
  ) {
    return _jpeg_data_log(
      data,
      log,
    );
  }

  late final _jpeg_data_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<JPEGData>, ffi.Pointer<ExifLog>)>>('jpeg_data_log');
  late final _jpeg_data_log = _jpeg_data_logPtr
      .asFunction<void Function(ffi.Pointer<JPEGData>, ffi.Pointer<ExifLog>)>();
}

abstract class JPEGMarker {
  static const int JPEG_MARKER_SOF0 = 192;
  static const int JPEG_MARKER_SOF1 = 193;
  static const int JPEG_MARKER_SOF2 = 194;
  static const int JPEG_MARKER_SOF3 = 195;
  static const int JPEG_MARKER_DHT = 196;
  static const int JPEG_MARKER_SOF5 = 197;
  static const int JPEG_MARKER_SOF6 = 198;
  static const int JPEG_MARKER_SOF7 = 199;
  static const int JPEG_MARKER_JPG = 200;
  static const int JPEG_MARKER_SOF9 = 201;
  static const int JPEG_MARKER_SOF10 = 202;
  static const int JPEG_MARKER_SOF11 = 203;
  static const int JPEG_MARKER_DAC = 204;
  static const int JPEG_MARKER_SOF13 = 205;
  static const int JPEG_MARKER_SOF14 = 206;
  static const int JPEG_MARKER_SOF15 = 207;
  static const int JPEG_MARKER_RST0 = 208;
  static const int JPEG_MARKER_RST1 = 209;
  static const int JPEG_MARKER_RST2 = 210;
  static const int JPEG_MARKER_RST3 = 211;
  static const int JPEG_MARKER_RST4 = 212;
  static const int JPEG_MARKER_RST5 = 213;
  static const int JPEG_MARKER_RST6 = 214;
  static const int JPEG_MARKER_RST7 = 215;
  static const int JPEG_MARKER_SOI = 216;
  static const int JPEG_MARKER_EOI = 217;
  static const int JPEG_MARKER_SOS = 218;
  static const int JPEG_MARKER_DQT = 219;
  static const int JPEG_MARKER_DNL = 220;
  static const int JPEG_MARKER_DRI = 221;
  static const int JPEG_MARKER_DHP = 222;
  static const int JPEG_MARKER_EXP = 223;
  static const int JPEG_MARKER_APP0 = 224;
  static const int JPEG_MARKER_APP1 = 225;
  static const int JPEG_MARKER_APP2 = 226;
  static const int JPEG_MARKER_APP3 = 227;
  static const int JPEG_MARKER_APP4 = 228;
  static const int JPEG_MARKER_APP5 = 229;
  static const int JPEG_MARKER_APP6 = 230;
  static const int JPEG_MARKER_APP7 = 231;
  static const int JPEG_MARKER_APP8 = 232;
  static const int JPEG_MARKER_APP9 = 233;
  static const int JPEG_MARKER_APP10 = 234;
  static const int JPEG_MARKER_APP11 = 235;
  static const int JPEG_MARKER_APP12 = 236;
  static const int JPEG_MARKER_APP13 = 237;
  static const int JPEG_MARKER_APP14 = 238;
  static const int JPEG_MARKER_APP15 = 239;
  static const int JPEG_MARKER_JPG0 = 240;
  static const int JPEG_MARKER_JPG1 = 241;
  static const int JPEG_MARKER_JPG2 = 242;
  static const int JPEG_MARKER_JPG3 = 243;
  static const int JPEG_MARKER_JPG4 = 244;
  static const int JPEG_MARKER_JPG5 = 245;
  static const int JPEG_MARKER_JPG6 = 246;
  static const int JPEG_MARKER_JPG7 = 247;
  static const int JPEG_MARKER_JPG8 = 248;
  static const int JPEG_MARKER_JPG9 = 249;
  static const int JPEG_MARKER_JPG10 = 250;
  static const int JPEG_MARKER_JPG11 = 251;
  static const int JPEG_MARKER_JPG12 = 252;
  static const int JPEG_MARKER_JPG13 = 253;
  static const int JPEG_MARKER_COM = 254;
}

final class _JPEGContentGeneric extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.UnsignedInt()
  external int size;
}

final class _JPEGSection extends ffi.Struct {
  @ffi.Int32()
  external int marker;

  external JPEGContent content;
}

typedef JPEGContent = _JPEGContent;

final class _JPEGContent extends ffi.Union {
  external JPEGContentGeneric generic;

  external JPEGContentAPP1 app1;
}

typedef JPEGContentGeneric = _JPEGContentGeneric;
typedef JPEGContentAPP1 = ffi.Pointer<ExifData>;

final class ExifData extends ffi.Struct {
  @ffi.Array.multi([5])
  external ffi.Array<ffi.Pointer<ExifContent>> ifd;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.UnsignedInt()
  external int size;

  external ffi.Pointer<ExifDataPrivate> priv;
}

final class ExifContent extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ExifEntry>> entries;

  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<ExifData> parent;

  external ffi.Pointer<ExifContentPrivate> priv;
}

final class ExifEntry extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  @ffi.Int32()
  external int format;

  @ffi.UnsignedLong()
  external int components;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.UnsignedInt()
  external int size;

  external ffi.Pointer<ExifContent> parent;

  external ffi.Pointer<ExifEntryPrivate> priv;
}

abstract class ExifTag {
  static const int EXIF_TAG_INTEROPERABILITY_INDEX = 1;
  static const int EXIF_TAG_INTEROPERABILITY_VERSION = 2;
  static const int EXIF_TAG_NEW_SUBFILE_TYPE = 254;
  static const int EXIF_TAG_IMAGE_WIDTH = 256;
  static const int EXIF_TAG_IMAGE_LENGTH = 257;
  static const int EXIF_TAG_BITS_PER_SAMPLE = 258;
  static const int EXIF_TAG_COMPRESSION = 259;
  static const int EXIF_TAG_PHOTOMETRIC_INTERPRETATION = 262;
  static const int EXIF_TAG_FILL_ORDER = 266;
  static const int EXIF_TAG_DOCUMENT_NAME = 269;
  static const int EXIF_TAG_IMAGE_DESCRIPTION = 270;
  static const int EXIF_TAG_MAKE = 271;
  static const int EXIF_TAG_MODEL = 272;
  static const int EXIF_TAG_STRIP_OFFSETS = 273;
  static const int EXIF_TAG_ORIENTATION = 274;
  static const int EXIF_TAG_SAMPLES_PER_PIXEL = 277;
  static const int EXIF_TAG_ROWS_PER_STRIP = 278;
  static const int EXIF_TAG_STRIP_BYTE_COUNTS = 279;
  static const int EXIF_TAG_X_RESOLUTION = 282;
  static const int EXIF_TAG_Y_RESOLUTION = 283;
  static const int EXIF_TAG_PLANAR_CONFIGURATION = 284;
  static const int EXIF_TAG_RESOLUTION_UNIT = 296;
  static const int EXIF_TAG_TRANSFER_FUNCTION = 301;
  static const int EXIF_TAG_SOFTWARE = 305;
  static const int EXIF_TAG_DATE_TIME = 306;
  static const int EXIF_TAG_ARTIST = 315;
  static const int EXIF_TAG_WHITE_POINT = 318;
  static const int EXIF_TAG_PRIMARY_CHROMATICITIES = 319;
  static const int EXIF_TAG_SUB_IFDS = 330;
  static const int EXIF_TAG_TRANSFER_RANGE = 342;
  static const int EXIF_TAG_JPEG_PROC = 512;
  static const int EXIF_TAG_JPEG_INTERCHANGE_FORMAT = 513;
  static const int EXIF_TAG_JPEG_INTERCHANGE_FORMAT_LENGTH = 514;
  static const int EXIF_TAG_YCBCR_COEFFICIENTS = 529;
  static const int EXIF_TAG_YCBCR_SUB_SAMPLING = 530;
  static const int EXIF_TAG_YCBCR_POSITIONING = 531;
  static const int EXIF_TAG_REFERENCE_BLACK_WHITE = 532;
  static const int EXIF_TAG_XML_PACKET = 700;
  static const int EXIF_TAG_RELATED_IMAGE_FILE_FORMAT = 4096;
  static const int EXIF_TAG_RELATED_IMAGE_WIDTH = 4097;
  static const int EXIF_TAG_RELATED_IMAGE_LENGTH = 4098;
  static const int EXIF_TAG_IMAGE_DEPTH = 32997;
  static const int EXIF_TAG_CFA_REPEAT_PATTERN_DIM = 33421;
  static const int EXIF_TAG_CFA_PATTERN = 33422;
  static const int EXIF_TAG_BATTERY_LEVEL = 33423;
  static const int EXIF_TAG_COPYRIGHT = 33432;
  static const int EXIF_TAG_EXPOSURE_TIME = 33434;
  static const int EXIF_TAG_FNUMBER = 33437;
  static const int EXIF_TAG_IPTC_NAA = 33723;
  static const int EXIF_TAG_IMAGE_RESOURCES = 34377;
  static const int EXIF_TAG_EXIF_IFD_POINTER = 34665;
  static const int EXIF_TAG_INTER_COLOR_PROFILE = 34675;
  static const int EXIF_TAG_EXPOSURE_PROGRAM = 34850;
  static const int EXIF_TAG_SPECTRAL_SENSITIVITY = 34852;
  static const int EXIF_TAG_GPS_INFO_IFD_POINTER = 34853;
  static const int EXIF_TAG_ISO_SPEED_RATINGS = 34855;
  static const int EXIF_TAG_OECF = 34856;
  static const int EXIF_TAG_TIME_ZONE_OFFSET = 34858;
  static const int EXIF_TAG_SENSITIVITY_TYPE = 34864;
  static const int EXIF_TAG_STANDARD_OUTPUT_SENSITIVITY = 34865;
  static const int EXIF_TAG_RECOMMENDED_EXPOSURE_INDEX = 34866;
  static const int EXIF_TAG_ISO_SPEED = 34867;
  static const int EXIF_TAG_ISO_SPEEDLatitudeYYY = 34868;
  static const int EXIF_TAG_ISO_SPEEDLatitudeZZZ = 34869;
  static const int EXIF_TAG_EXIF_VERSION = 36864;
  static const int EXIF_TAG_DATE_TIME_ORIGINAL = 36867;
  static const int EXIF_TAG_DATE_TIME_DIGITIZED = 36868;
  static const int EXIF_TAG_OFFSET_TIME = 36880;
  static const int EXIF_TAG_OFFSET_TIME_ORIGINAL = 36881;
  static const int EXIF_TAG_OFFSET_TIME_DIGITIZED = 36882;
  static const int EXIF_TAG_COMPONENTS_CONFIGURATION = 37121;
  static const int EXIF_TAG_COMPRESSED_BITS_PER_PIXEL = 37122;
  static const int EXIF_TAG_SHUTTER_SPEED_VALUE = 37377;
  static const int EXIF_TAG_APERTURE_VALUE = 37378;
  static const int EXIF_TAG_BRIGHTNESS_VALUE = 37379;
  static const int EXIF_TAG_EXPOSURE_BIAS_VALUE = 37380;
  static const int EXIF_TAG_MAX_APERTURE_VALUE = 37381;
  static const int EXIF_TAG_SUBJECT_DISTANCE = 37382;
  static const int EXIF_TAG_METERING_MODE = 37383;
  static const int EXIF_TAG_LIGHT_SOURCE = 37384;
  static const int EXIF_TAG_FLASH = 37385;
  static const int EXIF_TAG_FOCAL_LENGTH = 37386;
  static const int EXIF_TAG_SUBJECT_AREA = 37396;
  static const int EXIF_TAG_TIFF_EP_STANDARD_ID = 37398;
  static const int EXIF_TAG_MAKER_NOTE = 37500;
  static const int EXIF_TAG_USER_COMMENT = 37510;
  static const int EXIF_TAG_SUB_SEC_TIME = 37520;
  static const int EXIF_TAG_SUB_SEC_TIME_ORIGINAL = 37521;
  static const int EXIF_TAG_SUB_SEC_TIME_DIGITIZED = 37522;
  static const int EXIF_TAG_XP_TITLE = 40091;
  static const int EXIF_TAG_XP_COMMENT = 40092;
  static const int EXIF_TAG_XP_AUTHOR = 40093;
  static const int EXIF_TAG_XP_KEYWORDS = 40094;
  static const int EXIF_TAG_XP_SUBJECT = 40095;
  static const int EXIF_TAG_FLASH_PIX_VERSION = 40960;
  static const int EXIF_TAG_COLOR_SPACE = 40961;
  static const int EXIF_TAG_PIXEL_X_DIMENSION = 40962;
  static const int EXIF_TAG_PIXEL_Y_DIMENSION = 40963;
  static const int EXIF_TAG_RELATED_SOUND_FILE = 40964;
  static const int EXIF_TAG_INTEROPERABILITY_IFD_POINTER = 40965;
  static const int EXIF_TAG_FLASH_ENERGY = 41483;
  static const int EXIF_TAG_SPATIAL_FREQUENCY_RESPONSE = 41484;
  static const int EXIF_TAG_FOCAL_PLANE_X_RESOLUTION = 41486;
  static const int EXIF_TAG_FOCAL_PLANE_Y_RESOLUTION = 41487;
  static const int EXIF_TAG_FOCAL_PLANE_RESOLUTION_UNIT = 41488;
  static const int EXIF_TAG_SUBJECT_LOCATION = 41492;
  static const int EXIF_TAG_EXPOSURE_INDEX = 41493;
  static const int EXIF_TAG_SENSING_METHOD = 41495;
  static const int EXIF_TAG_FILE_SOURCE = 41728;
  static const int EXIF_TAG_SCENE_TYPE = 41729;
  static const int EXIF_TAG_NEW_CFA_PATTERN = 41730;
  static const int EXIF_TAG_CUSTOM_RENDERED = 41985;
  static const int EXIF_TAG_EXPOSURE_MODE = 41986;
  static const int EXIF_TAG_WHITE_BALANCE = 41987;
  static const int EXIF_TAG_DIGITAL_ZOOM_RATIO = 41988;
  static const int EXIF_TAG_FOCAL_LENGTH_IN_35MM_FILM = 41989;
  static const int EXIF_TAG_SCENE_CAPTURE_TYPE = 41990;
  static const int EXIF_TAG_GAIN_CONTROL = 41991;
  static const int EXIF_TAG_CONTRAST = 41992;
  static const int EXIF_TAG_SATURATION = 41993;
  static const int EXIF_TAG_SHARPNESS = 41994;
  static const int EXIF_TAG_DEVICE_SETTING_DESCRIPTION = 41995;
  static const int EXIF_TAG_SUBJECT_DISTANCE_RANGE = 41996;
  static const int EXIF_TAG_IMAGE_UNIQUE_ID = 42016;
  static const int EXIF_TAG_CAMERA_OWNER_NAME = 42032;
  static const int EXIF_TAG_BODY_SERIAL_NUMBER = 42033;
  static const int EXIF_TAG_LENS_SPECIFICATION = 42034;
  static const int EXIF_TAG_LENS_MAKE = 42035;
  static const int EXIF_TAG_LENS_MODEL = 42036;
  static const int EXIF_TAG_LENS_SERIAL_NUMBER = 42037;
  static const int EXIF_TAG_COMPOSITE_IMAGE = 42080;
  static const int EXIF_TAG_SOURCE_IMAGE_NUMBER_OF_COMPOSITE_IMAGE = 42081;
  static const int EXIF_TAG_SOURCE_EXPOSURE_TIMES_OF_COMPOSITE_IMAGE = 42082;
  static const int EXIF_TAG_GAMMA = 42240;
  static const int EXIF_TAG_PRINT_IMAGE_MATCHING = 50341;
  static const int EXIF_TAG_PADDING = 59932;
}

abstract class ExifFormat {
  static const int EXIF_FORMAT_BYTE = 1;
  static const int EXIF_FORMAT_ASCII = 2;
  static const int EXIF_FORMAT_SHORT = 3;
  static const int EXIF_FORMAT_LONG = 4;
  static const int EXIF_FORMAT_RATIONAL = 5;
  static const int EXIF_FORMAT_SBYTE = 6;
  static const int EXIF_FORMAT_UNDEFINED = 7;
  static const int EXIF_FORMAT_SSHORT = 8;
  static const int EXIF_FORMAT_SLONG = 9;
  static const int EXIF_FORMAT_SRATIONAL = 10;
  static const int EXIF_FORMAT_FLOAT = 11;
  static const int EXIF_FORMAT_DOUBLE = 12;
}

final class ExifEntryPrivate extends ffi.Opaque {}

final class ExifContentPrivate extends ffi.Opaque {}

final class ExifDataPrivate extends ffi.Opaque {}

final class _JPEGData extends ffi.Struct {
  external ffi.Pointer<JPEGSection> sections;

  @ffi.UnsignedInt()
  external int count;

  external ffi.Pointer<ffi.UnsignedChar> data;

  @ffi.UnsignedInt()
  external int size;

  external ffi.Pointer<JPEGDataPrivate> priv;
}

typedef JPEGSection = _JPEGSection;
typedef JPEGDataPrivate = _JPEGDataPrivate;

final class _JPEGDataPrivate extends ffi.Opaque {}

typedef JPEGData = _JPEGData;

final class ExifLog extends ffi.Opaque {}
